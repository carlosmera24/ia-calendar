-- MySQL Script generated by MySQL Workbench
-- mi√© 30 dic 2020 10:17:01
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema ia_calendar_db
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Table `roles`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `roles` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NOT NULL,
  `description` TEXT NULL,
  `created_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `status_users`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `status_users` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NOT NULL,
  `description` VARCHAR(45) NULL,
  `created_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `users`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `users` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(200) NOT NULL,
  `user` VARCHAR(45) NOT NULL,
  `password` TEXT NOT NULL,
  `roles_id` INT NOT NULL,
  `status_users_id` INT NOT NULL,
  `created_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`, `roles_id`, `status_users_id`),
  CONSTRAINT `fk_users_roles1`
    FOREIGN KEY (`roles_id`)
    REFERENCES `roles` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_users_status_users1`
    FOREIGN KEY (`status_users_id`)
    REFERENCES `status_users` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_users_roles1_idx` ON `users` (`roles_id` ASC);

CREATE UNIQUE INDEX `user_UNIQUE` ON `users` (`user` ASC);

CREATE INDEX `fk_users_status_users1_idx` ON `users` (`status_users_id` ASC);


-- -----------------------------------------------------
-- Table `programmers`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `programmers` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `entity_name` VARCHAR(120) NOT NULL,
  `NIT` VARCHAR(100) NOT NULL,
  `logo` TEXT NULL COMMENT 'Logo in format String64',
  `activated_birthday` TINYINT(1) NOT NULL DEFAULT 0 COMMENT '0: InActive, 1:Active',
  `activated_date_join_company` TINYINT(1) NOT NULL DEFAULT 0 COMMENT '0: InActive, 1:Active',
  `activated_tax_calendar` TINYINT(1) NOT NULL DEFAULT 0 COMMENT '0: InActive, 1:Active',
  `activated_car_tax` TINYINT(1) NOT NULL DEFAULT 0 COMMENT '0: InActive, 1:Active',
  `activated_ss_tax` TINYINT(1) NOT NULL DEFAULT 0 COMMENT '0: InActive, 1:Active',
  `created_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
COMMENT = 'Programador';


-- -----------------------------------------------------
-- Table `persons`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `persons` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `first_name` VARCHAR(100) NOT NULL,
  `last_name` VARCHAR(100) NOT NULL,
  `birth_date` DATE NOT NULL,
  `position_company` VARCHAR(60) NOT NULL,
  `date_join_company` DATE NULL,
  `created_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `persons_emails`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `persons_emails` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `email` VARCHAR(45) NOT NULL,
  `initial_register` TINYINT(1) NULL DEFAULT 0 COMMENT '0: No, 1:Yes',
  `persons_id` INT NOT NULL,
  `created_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`, `persons_id`),
  CONSTRAINT `fk_persons_emails_persons`
    FOREIGN KEY (`persons_id`)
    REFERENCES `persons` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_persons_emails_persons_idx` ON `persons_emails` (`persons_id` ASC);


-- -----------------------------------------------------
-- Table `persons_cellphones`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `persons_cellphones` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `cellphone_number` VARCHAR(100) NOT NULL,
  `initial_register` TINYINT(1) NULL DEFAULT 0 COMMENT '0: No, 1:Yes',
  `persons_id` INT NOT NULL,
  `created_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`, `persons_id`),
  CONSTRAINT `fk_persons_cellphones_persons1`
    FOREIGN KEY (`persons_id`)
    REFERENCES `persons` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_persons_cellphones_persons1_idx` ON `persons_cellphones` (`persons_id` ASC);


-- -----------------------------------------------------
-- Table `payment_methods`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `payment_methods` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NOT NULL,
  `description` TEXT NULL,
  `created_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `payment_status`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `payment_status` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NOT NULL,
  `description` TEXT NULL,
  `created_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `payments`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `payments` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `created_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `payment_status_id` INT NOT NULL,
  `payment_methods_id` INT NOT NULL,
  PRIMARY KEY (`id`, `payment_status_id`, `payment_methods_id`),
  CONSTRAINT `fk_payments_payment_status1`
    FOREIGN KEY (`payment_status_id`)
    REFERENCES `payment_status` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_payments_payment_methods1`
    FOREIGN KEY (`payment_methods_id`)
    REFERENCES `payment_methods` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_payments_payment_status1_idx` ON `payments` (`payment_status_id` ASC);

CREATE INDEX `fk_payments_payment_methods1_idx` ON `payments` (`payment_methods_id` ASC);


-- -----------------------------------------------------
-- Table `colors`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `colors` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NOT NULL,
  `description` TEXT NULL,
  `color` VARCHAR(16) NOT NULL COMMENT 'In Format hexadecimal',
  `created_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `style_categories`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `style_categories` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NOT NULL,
  `description` TEXT NULL,
  `rounded_corners` TINYINT(1) NOT NULL DEFAULT 0 COMMENT '0: NO, 1: Yes, rounded corners',
  `colors_id` INT NOT NULL,
  `created_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`, `colors_id`),
  CONSTRAINT `fk_style_categories_colors1`
    FOREIGN KEY (`colors_id`)
    REFERENCES `colors` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_style_categories_colors1_idx` ON `style_categories` (`colors_id` ASC);


-- -----------------------------------------------------
-- Table `fonts`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fonts` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NOT NULL,
  `description` TEXT NULL,
  `class_css` VARCHAR(45) NOT NULL,
  `created_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `style_programmers`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `style_programmers` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NOT NULL,
  `description` TEXT NULL,
  `colors_id` INT NOT NULL,
  `created_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`, `colors_id`),
  CONSTRAINT `fk_style_programmers_colors1`
    FOREIGN KEY (`colors_id`)
    REFERENCES `colors` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_style_programmers_colors1_idx` ON `style_programmers` (`colors_id` ASC);


-- -----------------------------------------------------
-- Table `settings`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `settings` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `programmers_id` INT NOT NULL,
  `style_categories_id` INT NOT NULL,
  `fonts_id` INT NOT NULL,
  `style_programmers_id` INT NOT NULL,
  `created_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`, `programmers_id`, `style_categories_id`, `fonts_id`, `style_programmers_id`),
  CONSTRAINT `fk_settings_programmers1`
    FOREIGN KEY (`programmers_id`)
    REFERENCES `programmers` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_settings_style_categories1`
    FOREIGN KEY (`style_categories_id`)
    REFERENCES `style_categories` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_settings_fonts1`
    FOREIGN KEY (`fonts_id`)
    REFERENCES `fonts` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_settings_style_programmers1`
    FOREIGN KEY (`style_programmers_id`)
    REFERENCES `style_programmers` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_settings_programmers1_idx` ON `settings` (`programmers_id` ASC);

CREATE INDEX `fk_settings_style_categories1_idx` ON `settings` (`style_categories_id` ASC);

CREATE INDEX `fk_settings_fonts1_idx` ON `settings` (`fonts_id` ASC);

CREATE INDEX `fk_settings_style_programmers1_idx` ON `settings` (`style_programmers_id` ASC);


-- -----------------------------------------------------
-- Table `tonos_colors`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `tonos_colors` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `color` VARCHAR(16) NOT NULL COMMENT 'In format hexadecimal',
  `level` INT NOT NULL DEFAULT 1 COMMENT 'Level/Priority/Order',
  `colors_id` INT NOT NULL,
  `created_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`, `colors_id`),
  CONSTRAINT `fk_tonos_colors_colors1`
    FOREIGN KEY (`colors_id`)
    REFERENCES `colors` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_tonos_colors_colors1_idx` ON `tonos_colors` (`colors_id` ASC);


-- -----------------------------------------------------
-- Table `profiles_participants`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `profiles_participants` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NOT NULL,
  `description` TEXT NULL,
  `created_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `participants`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `participants` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `persons_id` INT NOT NULL,
  `programmers_id` INT NOT NULL,
  `users_id` INT NULL,
  `profiles_participants_id` INT NOT NULL,
  `description` TEXT NULL,
  `created_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`, `persons_id`, `programmers_id`, `profiles_participants_id`),
  CONSTRAINT `fk_participants_persons1`
    FOREIGN KEY (`persons_id`)
    REFERENCES `persons` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_participants_programmers1`
    FOREIGN KEY (`programmers_id`)
    REFERENCES `programmers` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_participants_users1`
    FOREIGN KEY (`users_id`)
    REFERENCES `users` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_participants_profiles_participants1`
    FOREIGN KEY (`profiles_participants_id`)
    REFERENCES `profiles_participants` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_participants_persons1_idx` ON `participants` (`persons_id` ASC);

CREATE INDEX `fk_participants_programmers1_idx` ON `participants` (`programmers_id` ASC);

CREATE INDEX `fk_participants_users1_idx` ON `participants` (`users_id` ASC);

CREATE INDEX `fk_participants_profiles_participants1_idx` ON `participants` (`profiles_participants_id` ASC);


-- -----------------------------------------------------
-- Table `permissions`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `permissions` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NOT NULL,
  `description` TEXT NULL,
  `created_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `icons`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `icons` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NOT NULL,
  `class_css` VARCHAR(45) NOT NULL,
  `created_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `categories`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `categories` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `programmers_id` INT NOT NULL,
  `name` VARCHAR(60) NOT NULL,
  `description` TEXT NULL,
  `icons_id` INT NOT NULL,
  `colors_id` INT NOT NULL,
  `users_id` INT NOT NULL,
  `created_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`, `programmers_id`, `icons_id`, `colors_id`, `users_id`),
  CONSTRAINT `fk_categories_programmers1`
    FOREIGN KEY (`programmers_id`)
    REFERENCES `programmers` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_categories_icons1`
    FOREIGN KEY (`icons_id`)
    REFERENCES `icons` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_categories_colors1`
    FOREIGN KEY (`colors_id`)
    REFERENCES `colors` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_categories_users1`
    FOREIGN KEY (`users_id`)
    REFERENCES `users` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_categories_programmers1_idx` ON `categories` (`programmers_id` ASC);

CREATE INDEX `fk_categories_icons1_idx` ON `categories` (`icons_id` ASC);

CREATE INDEX `fk_categories_colors1_idx` ON `categories` (`colors_id` ASC);

CREATE INDEX `fk_categories_users1_idx` ON `categories` (`users_id` ASC);


-- -----------------------------------------------------
-- Table `participants_categories`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `participants_categories` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `categories_id` INT NOT NULL,
  `participants_id` INT NOT NULL,
  `created_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`, `categories_id`, `participants_id`),
  CONSTRAINT `fk_participants_categories_categories1`
    FOREIGN KEY (`categories_id`)
    REFERENCES `categories` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_participants_categories_participants1`
    FOREIGN KEY (`participants_id`)
    REFERENCES `participants` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_participants_categories_categories1_idx` ON `participants_categories` (`categories_id` ASC);

CREATE INDEX `fk_participants_categories_participants1_idx` ON `participants_categories` (`participants_id` ASC);


-- -----------------------------------------------------
-- Table `events`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `events` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `categories_id` INT NOT NULL,
  `site` VARCHAR(200) NOT NULL,
  `date_start` TIME NOT NULL,
  `date_finish` TIME NOT NULL,
  `continuity` ENUM('0', '1') NULL DEFAULT NULL COMMENT '0:Daily, 1:Weekly, 2:Monthly, 3:yearly',
  `duration` INT NOT NULL COMMENT 'Duration in minutes',
  `subject` VARCHAR(200) NOT NULL,
  `detail` TEXT NOT NULL,
  `users_id` INT NOT NULL,
  `created_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`, `categories_id`, `users_id`),
  CONSTRAINT `fk_events_categories1`
    FOREIGN KEY (`categories_id`)
    REFERENCES `categories` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_events_users1`
    FOREIGN KEY (`users_id`)
    REFERENCES `users` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_events_categories1_idx` ON `events` (`categories_id` ASC);

CREATE INDEX `fk_events_users1_idx` ON `events` (`users_id` ASC);


-- -----------------------------------------------------
-- Table `participants_events`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `participants_events` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `events_id` INT NOT NULL,
  `participants_id` INT NOT NULL,
  `created_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`, `events_id`, `participants_id`),
  CONSTRAINT `fk_participants_events_events1`
    FOREIGN KEY (`events_id`)
    REFERENCES `events` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_participants_events_participants1`
    FOREIGN KEY (`participants_id`)
    REFERENCES `participants` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_participants_events_events1_idx` ON `participants_events` (`events_id` ASC);

CREATE INDEX `fk_participants_events_participants1_idx` ON `participants_events` (`participants_id` ASC);


-- -----------------------------------------------------
-- Table `files_events`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `files_events` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NOT NULL,
  `mime_type` VARCHAR(45) NOT NULL,
  `path` TEXT NULL,
  `events_id` INT NOT NULL,
  `created_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`, `events_id`),
  CONSTRAINT `fk_files_events_events1`
    FOREIGN KEY (`events_id`)
    REFERENCES `events` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_files_events_events1_idx` ON `files_events` (`events_id` ASC);


-- -----------------------------------------------------
-- Table `memberships`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `memberships` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(60) NOT NULL,
  `description` TEXT NULL,
  `limit_categories` INT NULL DEFAULT NULL COMMENT 'NULL = Infinite, Not limit',
  `limit_events` INT NULL DEFAULT NULL COMMENT 'NULL = Infinite, Not limit',
  `limit_participants` INT NULL DEFAULT NULL COMMENT 'NULL = Infinite, Not limit',
  `limit_files_import` INT NULL DEFAULT NULL COMMENT 'NULL = Infinite, Not limit',
  `limit_cellphones` INT NULL DEFAULT NULL COMMENT 'NULL = Infinite, Not limit',
  `limit_emails` INT NULL DEFAULT NULL COMMENT 'NULL = Infinite, Not limit',
  `activated_annual_fiscal` TINYINT(1) NOT NULL COMMENT '0: Inactivate, 1:Active',
  `reminder_change_password` TINYINT(1) NOT NULL COMMENT '0: Inactivate, 1:Active',
  `created_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `countries`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `countries` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `alpha2_code` VARCHAR(2) NOT NULL COMMENT 'ISO 3166-1 Alpha2 code',
  `alpha3_code` VARCHAR(3) NOT NULL COMMENT 'ISO 3166-1 Alpha3 code',
  `numeric_code` INT NOT NULL,
  `phone_code` INT NOT NULL,
  `currency` VARCHAR(100) NOT NULL,
  `currency_code` VARCHAR(3) NOT NULL COMMENT 'ISO-4217',
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `prices_memberships_countries`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `prices_memberships_countries` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `countries_id` INT NOT NULL,
  `memberships_id` INT NOT NULL,
  `price` DOUBLE NOT NULL,
  `unit_type` ENUM('m', 'y') NOT NULL COMMENT 'm:Monthly, y: Yeraly',
  `description` TEXT NULL,
  `created_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`, `countries_id`, `memberships_id`),
  CONSTRAINT `fk_prices_memberships_countries_countries1`
    FOREIGN KEY (`countries_id`)
    REFERENCES `countries` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_prices_memberships_countries_memberships1`
    FOREIGN KEY (`memberships_id`)
    REFERENCES `memberships` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Relation for prices/cost of memberships';

CREATE INDEX `fk_prices_memberships_countries_countries1_idx` ON `prices_memberships_countries` (`countries_id` ASC);

CREATE INDEX `fk_prices_memberships_countries_memberships1_idx` ON `prices_memberships_countries` (`memberships_id` ASC);


-- -----------------------------------------------------
-- Table `countries_translations`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `countries_translations` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `countries_id` INT NOT NULL,
  `language` VARCHAR(2) NOT NULL COMMENT 'ISO 639-1 Two-letter',
  `name` VARCHAR(100) NOT NULL,
  PRIMARY KEY (`id`, `countries_id`),
  CONSTRAINT `fk_countries_translations_countries1`
    FOREIGN KEY (`countries_id`)
    REFERENCES `countries` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_countries_translations_countries1_idx` ON `countries_translations` (`countries_id` ASC);


-- -----------------------------------------------------
-- Table `status_programmers_memberships`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `status_programmers_memberships` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NOT NULL,
  `description` TEXT NULL,
  `created_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` DATETIME NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `programmers_memberships`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `programmers_memberships` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `programmers_id` INT NOT NULL,
  `prices_memberships_countries_id` INT NOT NULL,
  `payments_id` INT NOT NULL,
  `status_programmers_memberships_id` INT NOT NULL,
  `unit_type` ENUM('m', 'y') NOT NULL COMMENT 'm:Monthly, y: Yeraly',
  `created_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`, `programmers_id`, `prices_memberships_countries_id`, `payments_id`, `status_programmers_memberships_id`),
  CONSTRAINT `fk_programmers_menberships_programmers1`
    FOREIGN KEY (`programmers_id`)
    REFERENCES `programmers` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_programmers_menberships_prices_memberships_countries1`
    FOREIGN KEY (`prices_memberships_countries_id`)
    REFERENCES `prices_memberships_countries` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_programmers_menberships_payments1`
    FOREIGN KEY (`payments_id`)
    REFERENCES `payments` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_programmers_menberships_status_programmers_memberships1`
    FOREIGN KEY (`status_programmers_memberships_id`)
    REFERENCES `status_programmers_memberships` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Relation programers with memberships';

CREATE INDEX `fk_programmers_menberships_programmers1_idx` ON `programmers_memberships` (`programmers_id` ASC);

CREATE INDEX `fk_programmers_menberships_prices_memberships_countries1_idx` ON `programmers_memberships` (`prices_memberships_countries_id` ASC);

CREATE INDEX `fk_programmers_menberships_payments1_idx` ON `programmers_memberships` (`payments_id` ASC);

CREATE INDEX `fk_programmers_menberships_status_programmers_memberships1_idx` ON `programmers_memberships` (`status_programmers_memberships_id` ASC);


-- -----------------------------------------------------
-- Table `notifications_sheduled_events`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `notifications_sheduled_events` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `events_id` INT NOT NULL,
  `value` INT NOT NULL,
  `type` ENUM('m', 'w', 'd', 'h', 'i') NOT NULL COMMENT 'm: Month, w: Week, d: Day, h: hour, i: Minute',
  `created_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`, `events_id`),
  CONSTRAINT `fk_notifications_sheduled_events_events1`
    FOREIGN KEY (`events_id`)
    REFERENCES `events` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Notification scheduling record for events';

CREATE INDEX `fk_notifications_sheduled_events_events1_idx` ON `notifications_sheduled_events` (`events_id` ASC);


-- -----------------------------------------------------
-- Table `permissions_participants`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `permissions_participants` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `participants_id` INT NOT NULL,
  `permissions_id` INT NOT NULL,
  `created_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`, `participants_id`, `permissions_id`),
  CONSTRAINT `fk_permissions_participants_participants1`
    FOREIGN KEY (`participants_id`)
    REFERENCES `participants` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_permissions_participants_permisions1`
    FOREIGN KEY (`permissions_id`)
    REFERENCES `permissions` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Relation for permissions and participants';

CREATE INDEX `fk_permissions_participants_participants1_idx` ON `permissions_participants` (`participants_id` ASC);

CREATE INDEX `fk_permissions_participants_permisions1_idx` ON `permissions_participants` (`permissions_id` ASC);


-- -----------------------------------------------------
-- Table `updated_password`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `updated_password` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `old_password` TEXT NOT NULL,
  `created` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `users_id` INT NOT NULL,
  PRIMARY KEY (`id`, `users_id`),
  CONSTRAINT `fk_updated_password_users1`
    FOREIGN KEY (`users_id`)
    REFERENCES `users` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_updated_password_users1_idx` ON `updated_password` (`users_id` ASC);


-- -----------------------------------------------------
-- Table `wall_categories`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `wall_categories` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `participants_id` INT NOT NULL,
  `categories_id` INT NOT NULL,
  `created_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`, `participants_id`, `categories_id`),
  CONSTRAINT `fk_wall_categories_participants1`
    FOREIGN KEY (`participants_id`)
    REFERENCES `participants` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_wall_categories_categories1`
    FOREIGN KEY (`categories_id`)
    REFERENCES `categories` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Relationship for the customization of the wall with the available categories';

CREATE INDEX `fk_wall_categories_participants1_idx` ON `wall_categories` (`participants_id` ASC);

CREATE INDEX `fk_wall_categories_categories1_idx` ON `wall_categories` (`categories_id` ASC);


-- -----------------------------------------------------
-- Table `status_notes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `status_notes` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NOT NULL,
  `description` TEXT NULL,
  `created_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `notes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `notes` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `content` TEXT NOT NULL,
  `participants_id` INT NOT NULL,
  `status_notes_id` INT NOT NULL,
  `created_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`, `participants_id`, `status_notes_id`),
  CONSTRAINT `fk_notes_participants1`
    FOREIGN KEY (`participants_id`)
    REFERENCES `participants` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_notes_status_notes1`
    FOREIGN KEY (`status_notes_id`)
    REFERENCES `status_notes` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_notes_participants1_idx` ON `notes` (`participants_id` ASC);

CREATE INDEX `fk_notes_status_notes1_idx` ON `notes` (`status_notes_id` ASC);


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

-- -----------------------------------------------------
-- Data for table `roles`
-- -----------------------------------------------------
START TRANSACTION;
INSERT INTO `roles` (`id`, `name`, `description`, `created_at`, `updated_at`) VALUES (1, 'Administrador', 'Administrador del sistema', DEFAULT, DEFAULT);
INSERT INTO `roles` (`id`, `name`, `description`, `created_at`, `updated_at`) VALUES (2, 'Participante', 'Participante del programador', DEFAULT, DEFAULT);

COMMIT;


-- -----------------------------------------------------
-- Data for table `status_users`
-- -----------------------------------------------------
START TRANSACTION;
INSERT INTO `status_users` (`id`, `name`, `description`, `created_at`, `updated_at`) VALUES (1, 'Activo', 'Usuario activo y acceso permitido al sistema', DEFAULT, DEFAULT);
INSERT INTO `status_users` (`id`, `name`, `description`, `created_at`, `updated_at`) VALUES (2, 'Inactivo', NULL, DEFAULT, DEFAULT);
INSERT INTO `status_users` (`id`, `name`, `description`, `created_at`, `updated_at`) VALUES (3, 'Suspendido', NULL, DEFAULT, DEFAULT);
INSERT INTO `status_users` (`id`, `name`, `description`, `created_at`, `updated_at`) VALUES (4, 'Bloqueado', NULL, DEFAULT, DEFAULT);

COMMIT;


-- -----------------------------------------------------
-- Data for table `payment_methods`
-- -----------------------------------------------------
START TRANSACTION;
INSERT INTO `payment_methods` (`id`, `name`, `description`, `created_at`, `updated_at`) VALUES (1, 'Tarjeta de Cr√©dito', 'Pago con tarjeta de cr√©dito', DEFAULT, DEFAULT);
INSERT INTO `payment_methods` (`id`, `name`, `description`, `created_at`, `updated_at`) VALUES (2, 'Tarjeta d√©bito', 'Pago con tarjeta d√©bito', DEFAULT, DEFAULT);
INSERT INTO `payment_methods` (`id`, `name`, `description`, `created_at`, `updated_at`) VALUES (3, 'PSE', NULL, DEFAULT, DEFAULT);

COMMIT;


-- -----------------------------------------------------
-- Data for table `payment_status`
-- -----------------------------------------------------
START TRANSACTION;
INSERT INTO `payment_status` (`id`, `name`, `description`, `created_at`, `updated_at`) VALUES (1, 'Creado', 'Registro del pago de manera inicial', DEFAULT, DEFAULT);
INSERT INTO `payment_status` (`id`, `name`, `description`, `created_at`, `updated_at`) VALUES (2, 'Pendiente', 'Se realiz√≥ el pago pero est√° pendiente de aprobaci√≥n por entidad bancaria', DEFAULT, DEFAULT);
INSERT INTO `payment_status` (`id`, `name`, `description`, `created_at`, `updated_at`) VALUES (3, 'Aprobado', 'El pago se realiz√≥', DEFAULT, DEFAULT);
INSERT INTO `payment_status` (`id`, `name`, `description`, `created_at`, `updated_at`) VALUES (4, 'Rechazado', 'El pago fue rechazado por la entidad bancaria', DEFAULT, DEFAULT);
INSERT INTO `payment_status` (`id`, `name`, `description`, `created_at`, `updated_at`) VALUES (5, 'Cancelado', 'Pago cancelado o eliminado', DEFAULT, DEFAULT);

COMMIT;


-- -----------------------------------------------------
-- Data for table `profiles_participants`
-- -----------------------------------------------------
START TRANSACTION;
INSERT INTO `profiles_participants` (`id`, `name`, `description`, `created_at`, `updated_at`) VALUES (1, 'Administrador', 'Administrador del programador', DEFAULT, DEFAULT);
INSERT INTO `profiles_participants` (`id`, `name`, `description`, `created_at`, `updated_at`) VALUES (2, 'L√≠der', 'L√≠der del programador', DEFAULT, DEFAULT);
INSERT INTO `profiles_participants` (`id`, `name`, `description`, `created_at`, `updated_at`) VALUES (3, 'Invitado', 'Invitado del programador', DEFAULT, DEFAULT);

COMMIT;


-- -----------------------------------------------------
-- Data for table `permissions`
-- -----------------------------------------------------
START TRANSACTION;
INSERT INTO `permissions` (`id`, `name`, `description`, `created_at`, `updated_at`) VALUES (1, 'categories.index', 'Consultar categor√≠as', DEFAULT, DEFAULT);
INSERT INTO `permissions` (`id`, `name`, `description`, `created_at`, `updated_at`) VALUES (2, 'categories.create', 'Crear categor√≠as', DEFAULT, DEFAULT);
INSERT INTO `permissions` (`id`, `name`, `description`, `created_at`, `updated_at`) VALUES (3, 'categories.edit', 'Editar categor√≠as', DEFAULT, DEFAULT);
INSERT INTO `permissions` (`id`, `name`, `description`, `created_at`, `updated_at`) VALUES (4, 'categories.delete', 'Eliminar categor√≠as', DEFAULT, DEFAULT);
INSERT INTO `permissions` (`id`, `name`, `description`, `created_at`, `updated_at`) VALUES (5, 'categories.share', 'Compartir categor√≠as', DEFAULT, DEFAULT);
INSERT INTO `permissions` (`id`, `name`, `description`, `created_at`, `updated_at`) VALUES (6, 'events.index', 'Consultar eventos', DEFAULT, DEFAULT);
INSERT INTO `permissions` (`id`, `name`, `description`, `created_at`, `updated_at`) VALUES (7, 'events.create', 'Crear eventos', DEFAULT, DEFAULT);
INSERT INTO `permissions` (`id`, `name`, `description`, `created_at`, `updated_at`) VALUES (8, 'events.edit', 'Editar eventos', DEFAULT, DEFAULT);
INSERT INTO `permissions` (`id`, `name`, `description`, `created_at`, `updated_at`) VALUES (9, 'events.delete', 'Eliminar eventos', DEFAULT, DEFAULT);
INSERT INTO `permissions` (`id`, `name`, `description`, `created_at`, `updated_at`) VALUES (10, 'events.share', 'Compartir eventos', DEFAULT, DEFAULT);
INSERT INTO `permissions` (`id`, `name`, `description`, `created_at`, `updated_at`) VALUES (11, 'categories.administrator.access', 'Acceso a categor√≠as creadas por el administrador', DEFAULT, DEFAULT);
INSERT INTO `permissions` (`id`, `name`, `description`, `created_at`, `updated_at`) VALUES (12, 'events.administrator.access', 'Acceso a eventos creados por el administrador', DEFAULT, DEFAULT);

COMMIT;


-- -----------------------------------------------------
-- Data for table `status_programmers_memberships`
-- -----------------------------------------------------
START TRANSACTION;
INSERT INTO `status_programmers_memberships` (`id`, `name`, `description`, `created_at`, `updated_at`) VALUES (1, 'Activa', 'Membres√≠a activa/vigente', DEFAULT, NULL);
INSERT INTO `status_programmers_memberships` (`id`, `name`, `description`, `created_at`, `updated_at`) VALUES (2, 'Cancelada', 'La membres√≠a ha sido cancelada, no continuar√°', DEFAULT, NULL);
INSERT INTO `status_programmers_memberships` (`id`, `name`, `description`, `created_at`, `updated_at`) VALUES (3, 'Pendiente', 'Pendiente de pago', DEFAULT, NULL);
INSERT INTO `status_programmers_memberships` (`id`, `name`, `description`, `created_at`, `updated_at`) VALUES (4, 'Eliminada', 'Membres√≠a eliminada', DEFAULT, NULL);
INSERT INTO `status_programmers_memberships` (`id`, `name`, `description`, `created_at`, `updated_at`) VALUES (5, 'Caducada', 'El tiempo de la membres√≠a ha finalizado', DEFAULT, NULL);
INSERT INTO `status_programmers_memberships` (`id`, `name`, `description`, `created_at`, `updated_at`) VALUES (6, 'Suspendida', NULL, DEFAULT, NULL);
INSERT INTO `status_programmers_memberships` (`id`, `name`, `description`, `created_at`, `updated_at`) VALUES (7, 'Finalizada', 'La membres√≠a ha finalizado su tiempo de suscripci√≥n', DEFAULT, NULL);

COMMIT;


-- -----------------------------------------------------
-- Data for table `status_notes`
-- -----------------------------------------------------
START TRANSACTION;
INSERT INTO `status_notes` (`id`, `name`, `description`, `created_at`, `updated_at`) VALUES (1, 'Activo', 'Nota activa', DEFAULT, DEFAULT);
INSERT INTO `status_notes` (`id`, `name`, `description`, `created_at`, `updated_at`) VALUES (2, 'Caducada', 'El tiempo de activaci√≥n ha caducado', DEFAULT, DEFAULT);

COMMIT;

